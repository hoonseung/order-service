server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s # 데이터가 전송되지 않는 경우 tcp 연결을 닫기 전에 기다리는 시간

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s # 15초간의 우아한 종료 기간 정의
  config:
    import: "" #"optional:configserver:"

  r2dbc:
    name: polardb_order
    username: hoonseung
    password: seunghoon
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10

  flyway:
    baseline-on-migrate: true
    locations: "classpath:db/migration"
    user: ${spring.r2dbc.username}   # flyway r2dbc 를 지원하지 않기 때문에 db 접속 정보 입력 필요
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order

  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false # 재시도 작동
      retry:
        max-attempts: 6 # 최대 시도수
        initial-interval: 1000 # 최초 재시도 지연 시간 (밀리초)
        max-interval: 2000 # 재시도 지연 최대 시간
        multiplier: 1.1 # 지연 시간 계산 승수

    function:
      definition: dispatchOrder
    stream:
      bindings:
        dispatchOrder-in-0:
          destination: order-dispatched
          group: ${spring.application.name}
        acceptOrder-out-0:  # StreamBridge 에 의해 생성되고 관리되는 출력 바인딩
          destination: order-accepted

      rabbit:   # 클라우드 스트림 바인딩에 대한 래빗 mq 설정
        bindings:
          acceptOrder-out-0:  # 해당 바인딩에 대해 트랜잭션 지원 활성화
           producer:
             transacted: true

  rabbitmq:
    host: localhost
    username: hoonseung
    password: seunghoon
    port: 5672
    connection-timeout: 5s


polar:
  catalog-service-uri: http://localhost:9001

info:
  system: Polar-Bookshop

management:
  endpoints:
    web:
      exposure:
        include: bindings, configprops, env, flyway, functions, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  info:
    os:
      enabled: true
    java:
      enabled: true
    env:
      enabled: true

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"



